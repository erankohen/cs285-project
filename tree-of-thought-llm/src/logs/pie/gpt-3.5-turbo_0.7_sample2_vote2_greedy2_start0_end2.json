[
    {
        "steps": [
            {
                "step": 0,
                "x": "A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = 5000 * 2 * 10 ** 5\n\nfor i in range(10 ** 5 + 1):\n\n    s = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n\n    ans = min(ans, s)\n\n\n\nprint(ans)",
                "ys": [
                    ""
                ],
                "new_ys": [
                    "python\nA, B, C, X, Y = list(map(int, input().split()))\n\nans = float('inf')\n\nfor i in range(max(X, Y) + 1):\n    cost = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n    ans = min(ans, cost)\n\nprint(ans)\n",
                    "\nA, B, C, X, Y = list(map(int, input().split()))\n\ncost = X * A + Y * B\ncost_discounted = max(X, Y) * 2 * C\ncost_remaining = (X - min(X, Y)) * A + (Y - min(X, Y)) * B\n\nmin_cost = min(cost, cost_discounted + cost_remaining)\n\nprint(min_cost)\n"
                ],
                "values": [
                    0,
                    2
                ],
                "select_new_ys": [
                    "\nA, B, C, X, Y = list(map(int, input().split()))\n\ncost = X * A + Y * B\ncost_discounted = max(X, Y) * 2 * C\ncost_remaining = (X - min(X, Y)) * A + (Y - min(X, Y)) * B\n\nmin_cost = min(cost, cost_discounted + cost_remaining)\n\nprint(min_cost)\n",
                    "python\nA, B, C, X, Y = list(map(int, input().split()))\n\nans = float('inf')\n\nfor i in range(max(X, Y) + 1):\n    cost = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n    ans = min(ans, cost)\n\nprint(ans)\n"
                ]
            }
        ],
        "idx": 0,
        "ys": [
            "\nA, B, C, X, Y = list(map(int, input().split()))\n\ncost = X * A + Y * B\ncost_discounted = max(X, Y) * 2 * C\ncost_remaining = (X - min(X, Y)) * A + (Y - min(X, Y)) * B\n\nmin_cost = min(cost, cost_discounted + cost_remaining)\n\nprint(min_cost)\n",
            "python\nA, B, C, X, Y = list(map(int, input().split()))\n\nans = float('inf')\n\nfor i in range(max(X, Y) + 1):\n    cost = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n    ans = min(ans, cost)\n\nprint(ans)\n"
        ],
        "infos": [
            {
                "r": 2
            },
            {
                "r": 1
            }
        ],
        "usage_so_far": {
            "completion_tokens": 2397,
            "prompt_tokens": 1668,
            "cost": 0.0072959999999999995
        }
    },
    {
        "steps": [
            {
                "step": 0,
                "x": "import sys\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nN = int(read())\n\nx = N + (-N) % 1000\n\nprint((x - N))",
                "ys": [
                    ""
                ],
                "new_ys": [
                    "python\nN = int(input())\n\nx = (N // 1000) * 1000 + 1000\n\nprint(x - N)\n",
                    "\nimport sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nN = int(read())\nx = (N // 1000) * 1000\nprint(x - N)\n"
                ],
                "values": [
                    1,
                    1
                ],
                "select_new_ys": [
                    "python\nN = int(input())\n\nx = (N // 1000) * 1000 + 1000\n\nprint(x - N)\n",
                    "\nimport sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nN = int(read())\nx = (N // 1000) * 1000\nprint(x - N)\n"
                ]
            }
        ],
        "idx": 1,
        "ys": [
            "python\nN = int(input())\n\nx = (N // 1000) * 1000 + 1000\n\nprint(x - N)\n",
            "\nimport sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nN = int(read())\nx = (N // 1000) * 1000\nprint(x - N)\n"
        ],
        "infos": [
            {
                "r": 1
            },
            {
                "r": 2
            }
        ],
        "usage_so_far": {
            "completion_tokens": 4411,
            "prompt_tokens": 3039,
            "cost": 0.0133805
        }
    }
]